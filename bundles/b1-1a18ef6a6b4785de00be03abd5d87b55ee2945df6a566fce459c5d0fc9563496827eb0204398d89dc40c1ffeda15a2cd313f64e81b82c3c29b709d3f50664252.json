{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "1a18ef6a6b4785de00be03abd5d87b55ee2945df6a566fce459c5d0fc9563496827eb0204398d89dc40c1ffeda15a2cd313f64e81b82c3c29b709d3f50664252"
}